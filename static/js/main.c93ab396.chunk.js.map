{"version":3,"sources":["components/Dialog.js","components/Service.js","App.js","serviceWorker.js","index.js"],"names":["Dialog","props","console","log","index","desc","imgUrl","react_default","a","createElement","className","id","type","data-dismiss","src","alt","Service","state","feelings","_this2","this","axios","get","then","response","data","setState","catch","error","_this3","feels","map","feel","i","key","data-toggle","data-target","onClick","disabled","components_Dialog","Component","styles","backgroundColor","padding","App","style","components_Service","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAyBeA,EAvBA,SAACC,GACZC,QAAQC,IAAIF,GACkBA,EAAvBG,MAFe,IAERC,EAAgBJ,EAAhBI,KAAMC,EAAUL,EAAVK,OACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaC,GAAG,WAC3BJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeL,GAC7BE,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,QAAQG,eAAa,SAArD,SAEJN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAQS,IAAI,UAAUL,UAAU,uCAE9CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASF,UAAU,iBAAiBG,eAAa,SAA9D,cC4CTG,6MAvDXC,MAAQ,CACJC,SAAU,GACVP,GAAI,KACJL,OAAQ,GACRD,KAAM,wFAGW,IAAAc,EAAAC,KACjBC,IAAMC,IAAI,+CACTC,KAAK,SAAAC,GACFtB,QAAQC,IAAIqB,EAASC,KAAKP,UAC1BC,EAAKO,SAAS,CAACR,SAAUM,EAASC,KAAKP,aAE1CS,MAAM,SAAAC,GAAU1B,QAAQC,IAAI,SAAUyB,sCAGlC,IAAAC,EAAAT,KAECU,EADaV,KAAKH,MAAjBC,SACgBa,IAAI,SAACC,EAAKC,GAAN,OACvB1B,EAAAC,EAAAC,cAAA,MAAIyB,IAAKD,GACL1B,EAAAC,EAAAC,cAAA,UAAKuB,EAAKrB,IACVJ,EAAAC,EAAAC,cAAA,UAAKuB,EAAK3B,MACVE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SACLF,UAAU,6BACVyB,cAAY,QACZC,cAAY,WAAWC,QAAS,kBAAMR,EAAKH,SAAS,CAACf,GAAGqB,EAAKrB,GAAIL,OAAO0B,EAAK1B,OAAQD,KAAM2B,EAAK3B,SAHxG,WAMAE,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAAS0B,UAAQ,EAAC5B,UAAU,kCAAzC,cAMZ,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,wBAGRF,EAAAC,EAAAC,cAAA,aACKqB,IAGTvB,EAAAC,EAAAC,cAAC8B,EAAD,CAAQnC,MAAOgB,KAAKH,MAAMN,GAAIN,KAAMe,KAAKH,MAAMZ,KAAMC,OAAQc,KAAKH,MAAMX,iBAnDlEkC,aCAhBC,EAAS,CACbC,gBAAiB,UACjBC,QAAS,QAcIC,mLATX,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCAAmCmC,MAAOJ,GAAxD,wDACAlC,EAAAC,EAAAC,cAACqC,EAAD,cALUN,aCGEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.c93ab396.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Dialog = (props) => {\r\n    console.log(props);\r\n    const {index, desc, imgUrl} = props;\r\n    return(\r\n        <div className=\"modal fade\" id=\"myModal\">\r\n            <div className=\"modal-dialog modal-dialog-centered\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h4 className=\"modal-title\">{desc}</h4>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <img src={imgUrl} alt=\"mapache\" className=\"img-fluid rounded mx-auto d-block\" />\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn text-light\" data-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport Dialog from './Dialog';\r\n\r\nclass Service extends Component {\r\n\r\n    state = {\r\n        feelings: [],\r\n        id: null,\r\n        imgUrl: \"\",\r\n        desc: \"\"\r\n    }\r\n\r\n    componentWillMount() {\r\n        axios.get('http://159.89.143.117:3001/raccoon/feelings')\r\n        .then(response => {\r\n            console.log(response.data.feelings);\r\n            this.setState({feelings: response.data.feelings});\r\n        })\r\n        .catch(error => {console.log(\"falla \"+ error)});\r\n    }\r\n\r\n    render() {\r\n        const {feelings} = this.state;\r\n        const feels = feelings.map((feel,i) => (\r\n            <tr key={i}>\r\n                <td>{feel.id}</td>\r\n                <td>{feel.desc}</td>\r\n                <td>\r\n                    <button type=\"button\" \r\n                            className=\"btn mr-2 btn-sm text-light\" \r\n                            data-toggle=\"modal\" \r\n                            data-target=\"#myModal\" onClick={() => this.setState({id:feel.id, imgUrl:feel.imgUrl, desc: feel.desc})}>\r\n                            Detalle\r\n                    </button>\r\n                    <button type=\"button\" disabled className=\"btn text-light btn-sm disabled\">\r\n                        Elegir\r\n                    </button>\r\n                </td>\r\n            </tr>));\r\n        \r\n        return (\r\n            <div className=\"row d-flex justify-content-center\">\r\n                <table className=\"table col-md-6 bg-light\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Me siento...</th>\r\n                            <th>Acciones</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {feels}\r\n                    </tbody>\r\n                </table>\r\n                <Dialog index={this.state.id} desc={this.state.desc} imgUrl={this.state.imgUrl}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Service\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Service from './components/Service';\n\nconst styles = {\n  backgroundColor: '#E11C4C',\n  padding: '10px'\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <h3 className=\"text-center mt-1 mb-3 text-light\" style={styles}>¿En la escala del raccoon cómo te sientes hoy?</h3>\n        <Service />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}